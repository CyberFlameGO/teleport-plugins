// Code generated by protoc-gen-tfschema. DO NOT EDIT.
// versions:
// 	protoc-gen-tfschema 0.0.1
// 	protoc        		v3.14.0
// source: types.proto

package tfschema

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
)

// proto type fullname: types.RoleV3
func SchemaRoleV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				// nested type name: types.Metadata
				Schema: map[string]*schema.Schema{
					"name": {
						Type:     schema.TypeString,
						Optional: true,
					},
					"namespace": {
						Type:     schema.TypeString,
						Optional: true,
					},
					"description": {
						Type:     schema.TypeString,
						Optional: true,
					},
					"labels": {
						Type:     schema.TypeMap,
						Optional: true,
						Elem: &schema.Schema{
							Type: schema.TypeString,
						},
					},
					"expires": {
						Type:         schema.TypeString,
						Optional:     true,
						ValidateFunc: validation.IsRFC3339Time,
					},
					"id": {
						Type:     schema.TypeInt,
						Optional: true,
					},
				},
			},
		},
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				// nested type name: types.RoleSpecV3
				Schema: map[string]*schema.Schema{
					"options": {
						Type:     schema.TypeList,
						Optional: true,
						MaxItems: 1,
						Elem: &schema.Resource{
							// nested type name: types.RoleOptions
							Schema: map[string]*schema.Schema{
								"forward_agent": {
									Type:     schema.TypeBool,
									Optional: true,
								},
								"max_session_ttl": {
									Type:     schema.TypeInt,
									Optional: true,
								},
								"port_forwarding": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: types.BoolValue
										Schema: map[string]*schema.Schema{
											"value": {
												Type:     schema.TypeBool,
												Optional: true,
											},
										},
									},
								},
								"certificate_format": {
									Type:     schema.TypeString,
									Optional: true,
								},
								"client_idle_timeout": {
									Type:     schema.TypeInt,
									Optional: true,
								},
								"disconnect_expired_cert": {
									Type:     schema.TypeBool,
									Optional: true,
								},
								"bpf": {
									Type:     schema.TypeList,
									Optional: true,
									Elem:     &schema.Schema{Type: schema.TypeString},
								},
								"permit_x11_forwarding": {
									Type:     schema.TypeBool,
									Optional: true,
								},
								"max_connections": {
									Type:     schema.TypeInt,
									Optional: true,
								},
								"max_sessions": {
									Type:     schema.TypeInt,
									Optional: true,
								},
								"request_access": {
									Type:     schema.TypeString,
									Optional: true,
								},
								"request_prompt": {
									Type:     schema.TypeString,
									Optional: true,
								},
							},
						},
					},
					"allow": {
						Type:     schema.TypeList,
						Optional: true,
						MaxItems: 1,
						Elem: &schema.Resource{
							// nested type name: types.RoleConditions
							Schema: map[string]*schema.Schema{
								"logins": {
									Type:     schema.TypeList,
									Optional: true,
									Elem:     &schema.Schema{Type: schema.TypeString},
								},
								"namespaces": {
									Type:     schema.TypeList,
									Optional: true,
									Elem:     &schema.Schema{Type: schema.TypeString},
								},
								"node_labels": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: wrappers.LabelValues
										Schema: map[string]*schema.Schema{
											"values": {
												Type:     schema.TypeList,
												Optional: true,
												MaxItems: 1,
												Elem: &schema.Resource{
													// nested type name: wrappers.LabelValues.ValuesEntry
													Schema: map[string]*schema.Schema{
														"key": {
															Type:     schema.TypeString,
															Optional: true,
														},
														"value": {
															Type:     schema.TypeList,
															Optional: true,
															MaxItems: 1,
															Elem: &schema.Resource{
																// nested type name: wrappers.StringValues
																Schema: map[string]*schema.Schema{
																	"values": {
																		Type:     schema.TypeList,
																		Optional: true,
																		Elem:     &schema.Schema{Type: schema.TypeString},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								"rules": {
									Type:     schema.TypeList,
									Optional: true,
									Elem: &schema.Resource{
										// nested type name: types.Rule
										Schema: map[string]*schema.Schema{
											"resources": {
												Type:     schema.TypeList,
												Optional: true,
												Elem:     &schema.Schema{Type: schema.TypeString},
											},
											"verbs": {
												Type:     schema.TypeList,
												Optional: true,
												Elem:     &schema.Schema{Type: schema.TypeString},
											},
											"where": {
												Type:     schema.TypeString,
												Optional: true,
											},
											"actions": {
												Type:     schema.TypeList,
												Optional: true,
												Elem:     &schema.Schema{Type: schema.TypeString},
											},
										},
									},
								},
								"kube_groups": {
									Type:     schema.TypeList,
									Optional: true,
									Elem:     &schema.Schema{Type: schema.TypeString},
								},
								"request": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: types.AccessRequestConditions
										Schema: map[string]*schema.Schema{
											"roles": {
												Type:     schema.TypeList,
												Optional: true,
												Elem:     &schema.Schema{Type: schema.TypeString},
											},
											"claims_to_roles": {
												Type:     schema.TypeList,
												Optional: true,
												Elem: &schema.Resource{
													// nested type name: types.AccessRequestClaimMapping
													Schema: map[string]*schema.Schema{
														"claim": {
															Type:     schema.TypeString,
															Optional: true,
														},
														"value": {
															Type:     schema.TypeString,
															Optional: true,
														},
														"roles": {
															Type:     schema.TypeList,
															Optional: true,
															Elem:     &schema.Schema{Type: schema.TypeString},
														},
													},
												},
											},
											"annotations": {
												Type:     schema.TypeList,
												Optional: true,
												MaxItems: 1,
												Elem: &schema.Resource{
													// nested type name: wrappers.LabelValues
													Schema: map[string]*schema.Schema{
														"values": {
															Type:     schema.TypeList,
															Optional: true,
															MaxItems: 1,
															Elem: &schema.Resource{
																// nested type name: wrappers.LabelValues.ValuesEntry
																Schema: map[string]*schema.Schema{
																	"key": {
																		Type:     schema.TypeString,
																		Optional: true,
																	},
																	"value": {
																		Type:     schema.TypeList,
																		Optional: true,
																		MaxItems: 1,
																		Elem: &schema.Resource{
																			// nested type name: wrappers.StringValues
																			Schema: map[string]*schema.Schema{
																				"values": {
																					Type:     schema.TypeList,
																					Optional: true,
																					Elem:     &schema.Schema{Type: schema.TypeString},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								"kube_users": {
									Type:     schema.TypeList,
									Optional: true,
									Elem:     &schema.Schema{Type: schema.TypeString},
								},
								"app_labels": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: wrappers.LabelValues
										Schema: map[string]*schema.Schema{
											"values": {
												Type:     schema.TypeList,
												Optional: true,
												MaxItems: 1,
												Elem: &schema.Resource{
													// nested type name: wrappers.LabelValues.ValuesEntry
													Schema: map[string]*schema.Schema{
														"key": {
															Type:     schema.TypeString,
															Optional: true,
														},
														"value": {
															Type:     schema.TypeList,
															Optional: true,
															MaxItems: 1,
															Elem: &schema.Resource{
																// nested type name: wrappers.StringValues
																Schema: map[string]*schema.Schema{
																	"values": {
																		Type:     schema.TypeList,
																		Optional: true,
																		Elem:     &schema.Schema{Type: schema.TypeString},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								"cluster_labels": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: wrappers.LabelValues
										Schema: map[string]*schema.Schema{
											"values": {
												Type:     schema.TypeList,
												Optional: true,
												MaxItems: 1,
												Elem: &schema.Resource{
													// nested type name: wrappers.LabelValues.ValuesEntry
													Schema: map[string]*schema.Schema{
														"key": {
															Type:     schema.TypeString,
															Optional: true,
														},
														"value": {
															Type:     schema.TypeList,
															Optional: true,
															MaxItems: 1,
															Elem: &schema.Resource{
																// nested type name: wrappers.StringValues
																Schema: map[string]*schema.Schema{
																	"values": {
																		Type:     schema.TypeList,
																		Optional: true,
																		Elem:     &schema.Schema{Type: schema.TypeString},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								"kubernetes_labels": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: wrappers.LabelValues
										Schema: map[string]*schema.Schema{
											"values": {
												Type:     schema.TypeList,
												Optional: true,
												MaxItems: 1,
												Elem: &schema.Resource{
													// nested type name: wrappers.LabelValues.ValuesEntry
													Schema: map[string]*schema.Schema{
														"key": {
															Type:     schema.TypeString,
															Optional: true,
														},
														"value": {
															Type:     schema.TypeList,
															Optional: true,
															MaxItems: 1,
															Elem: &schema.Resource{
																// nested type name: wrappers.StringValues
																Schema: map[string]*schema.Schema{
																	"values": {
																		Type:     schema.TypeList,
																		Optional: true,
																		Elem:     &schema.Schema{Type: schema.TypeString},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								"database_labels": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: wrappers.LabelValues
										Schema: map[string]*schema.Schema{
											"values": {
												Type:     schema.TypeList,
												Optional: true,
												MaxItems: 1,
												Elem: &schema.Resource{
													// nested type name: wrappers.LabelValues.ValuesEntry
													Schema: map[string]*schema.Schema{
														"key": {
															Type:     schema.TypeString,
															Optional: true,
														},
														"value": {
															Type:     schema.TypeList,
															Optional: true,
															MaxItems: 1,
															Elem: &schema.Resource{
																// nested type name: wrappers.StringValues
																Schema: map[string]*schema.Schema{
																	"values": {
																		Type:     schema.TypeList,
																		Optional: true,
																		Elem:     &schema.Schema{Type: schema.TypeString},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								"database_names": {
									Type:     schema.TypeList,
									Optional: true,
									Elem:     &schema.Schema{Type: schema.TypeString},
								},
								"database_users": {
									Type:     schema.TypeList,
									Optional: true,
									Elem:     &schema.Schema{Type: schema.TypeString},
								},
							},
						},
					},
					"deny": {
						Type:     schema.TypeList,
						Optional: true,
						MaxItems: 1,
						Elem: &schema.Resource{
							// nested type name: types.RoleConditions
							Schema: map[string]*schema.Schema{
								"logins": {
									Type:     schema.TypeList,
									Optional: true,
									Elem:     &schema.Schema{Type: schema.TypeString},
								},
								"namespaces": {
									Type:     schema.TypeList,
									Optional: true,
									Elem:     &schema.Schema{Type: schema.TypeString},
								},
								"node_labels": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: wrappers.LabelValues
										Schema: map[string]*schema.Schema{
											"values": {
												Type:     schema.TypeList,
												Optional: true,
												MaxItems: 1,
												Elem: &schema.Resource{
													// nested type name: wrappers.LabelValues.ValuesEntry
													Schema: map[string]*schema.Schema{
														"key": {
															Type:     schema.TypeString,
															Optional: true,
														},
														"value": {
															Type:     schema.TypeList,
															Optional: true,
															MaxItems: 1,
															Elem: &schema.Resource{
																// nested type name: wrappers.StringValues
																Schema: map[string]*schema.Schema{
																	"values": {
																		Type:     schema.TypeList,
																		Optional: true,
																		Elem:     &schema.Schema{Type: schema.TypeString},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								"rules": {
									Type:     schema.TypeList,
									Optional: true,
									Elem: &schema.Resource{
										// nested type name: types.Rule
										Schema: map[string]*schema.Schema{
											"resources": {
												Type:     schema.TypeList,
												Optional: true,
												Elem:     &schema.Schema{Type: schema.TypeString},
											},
											"verbs": {
												Type:     schema.TypeList,
												Optional: true,
												Elem:     &schema.Schema{Type: schema.TypeString},
											},
											"where": {
												Type:     schema.TypeString,
												Optional: true,
											},
											"actions": {
												Type:     schema.TypeList,
												Optional: true,
												Elem:     &schema.Schema{Type: schema.TypeString},
											},
										},
									},
								},
								"kube_groups": {
									Type:     schema.TypeList,
									Optional: true,
									Elem:     &schema.Schema{Type: schema.TypeString},
								},
								"request": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: types.AccessRequestConditions
										Schema: map[string]*schema.Schema{
											"roles": {
												Type:     schema.TypeList,
												Optional: true,
												Elem:     &schema.Schema{Type: schema.TypeString},
											},
											"claims_to_roles": {
												Type:     schema.TypeList,
												Optional: true,
												Elem: &schema.Resource{
													// nested type name: types.AccessRequestClaimMapping
													Schema: map[string]*schema.Schema{
														"claim": {
															Type:     schema.TypeString,
															Optional: true,
														},
														"value": {
															Type:     schema.TypeString,
															Optional: true,
														},
														"roles": {
															Type:     schema.TypeList,
															Optional: true,
															Elem:     &schema.Schema{Type: schema.TypeString},
														},
													},
												},
											},
											"annotations": {
												Type:     schema.TypeList,
												Optional: true,
												MaxItems: 1,
												Elem: &schema.Resource{
													// nested type name: wrappers.LabelValues
													Schema: map[string]*schema.Schema{
														"values": {
															Type:     schema.TypeList,
															Optional: true,
															MaxItems: 1,
															Elem: &schema.Resource{
																// nested type name: wrappers.LabelValues.ValuesEntry
																Schema: map[string]*schema.Schema{
																	"key": {
																		Type:     schema.TypeString,
																		Optional: true,
																	},
																	"value": {
																		Type:     schema.TypeList,
																		Optional: true,
																		MaxItems: 1,
																		Elem: &schema.Resource{
																			// nested type name: wrappers.StringValues
																			Schema: map[string]*schema.Schema{
																				"values": {
																					Type:     schema.TypeList,
																					Optional: true,
																					Elem:     &schema.Schema{Type: schema.TypeString},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								"kube_users": {
									Type:     schema.TypeList,
									Optional: true,
									Elem:     &schema.Schema{Type: schema.TypeString},
								},
								"app_labels": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: wrappers.LabelValues
										Schema: map[string]*schema.Schema{
											"values": {
												Type:     schema.TypeList,
												Optional: true,
												MaxItems: 1,
												Elem: &schema.Resource{
													// nested type name: wrappers.LabelValues.ValuesEntry
													Schema: map[string]*schema.Schema{
														"key": {
															Type:     schema.TypeString,
															Optional: true,
														},
														"value": {
															Type:     schema.TypeList,
															Optional: true,
															MaxItems: 1,
															Elem: &schema.Resource{
																// nested type name: wrappers.StringValues
																Schema: map[string]*schema.Schema{
																	"values": {
																		Type:     schema.TypeList,
																		Optional: true,
																		Elem:     &schema.Schema{Type: schema.TypeString},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								"cluster_labels": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: wrappers.LabelValues
										Schema: map[string]*schema.Schema{
											"values": {
												Type:     schema.TypeList,
												Optional: true,
												MaxItems: 1,
												Elem: &schema.Resource{
													// nested type name: wrappers.LabelValues.ValuesEntry
													Schema: map[string]*schema.Schema{
														"key": {
															Type:     schema.TypeString,
															Optional: true,
														},
														"value": {
															Type:     schema.TypeList,
															Optional: true,
															MaxItems: 1,
															Elem: &schema.Resource{
																// nested type name: wrappers.StringValues
																Schema: map[string]*schema.Schema{
																	"values": {
																		Type:     schema.TypeList,
																		Optional: true,
																		Elem:     &schema.Schema{Type: schema.TypeString},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								"kubernetes_labels": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: wrappers.LabelValues
										Schema: map[string]*schema.Schema{
											"values": {
												Type:     schema.TypeList,
												Optional: true,
												MaxItems: 1,
												Elem: &schema.Resource{
													// nested type name: wrappers.LabelValues.ValuesEntry
													Schema: map[string]*schema.Schema{
														"key": {
															Type:     schema.TypeString,
															Optional: true,
														},
														"value": {
															Type:     schema.TypeList,
															Optional: true,
															MaxItems: 1,
															Elem: &schema.Resource{
																// nested type name: wrappers.StringValues
																Schema: map[string]*schema.Schema{
																	"values": {
																		Type:     schema.TypeList,
																		Optional: true,
																		Elem:     &schema.Schema{Type: schema.TypeString},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								"database_labels": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: wrappers.LabelValues
										Schema: map[string]*schema.Schema{
											"values": {
												Type:     schema.TypeList,
												Optional: true,
												MaxItems: 1,
												Elem: &schema.Resource{
													// nested type name: wrappers.LabelValues.ValuesEntry
													Schema: map[string]*schema.Schema{
														"key": {
															Type:     schema.TypeString,
															Optional: true,
														},
														"value": {
															Type:     schema.TypeList,
															Optional: true,
															MaxItems: 1,
															Elem: &schema.Resource{
																// nested type name: wrappers.StringValues
																Schema: map[string]*schema.Schema{
																	"values": {
																		Type:     schema.TypeList,
																		Optional: true,
																		Elem:     &schema.Schema{Type: schema.TypeString},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								"database_names": {
									Type:     schema.TypeList,
									Optional: true,
									Elem:     &schema.Schema{Type: schema.TypeString},
								},
								"database_users": {
									Type:     schema.TypeList,
									Optional: true,
									Elem:     &schema.Schema{Type: schema.TypeString},
								},
							},
						},
					},
				},
			},
		},
	}
}

// proto type fullname: types.UserV2
func SchemaUserV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				// nested type name: types.Metadata
				Schema: map[string]*schema.Schema{
					"name": {
						Type:     schema.TypeString,
						Optional: true,
					},
					"namespace": {
						Type:     schema.TypeString,
						Optional: true,
					},
					"description": {
						Type:     schema.TypeString,
						Optional: true,
					},
					"labels": {
						Type:     schema.TypeMap,
						Optional: true,
						Elem: &schema.Schema{
							Type: schema.TypeString,
						},
					},
					"expires": {
						Type:         schema.TypeString,
						Optional:     true,
						ValidateFunc: validation.IsRFC3339Time,
					},
					"id": {
						Type:     schema.TypeInt,
						Optional: true,
					},
				},
			},
		},
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				// nested type name: types.UserSpecV2
				Schema: map[string]*schema.Schema{
					"oidc_identities": {
						Type:     schema.TypeList,
						Optional: true,
						Elem: &schema.Resource{
							// nested type name: types.ExternalIdentity
							Schema: map[string]*schema.Schema{
								"connector_id": {
									Type:     schema.TypeString,
									Optional: true,
								},
								"username": {
									Type:     schema.TypeString,
									Optional: true,
								},
							},
						},
					},
					"saml_identities": {
						Type:     schema.TypeList,
						Optional: true,
						Elem: &schema.Resource{
							// nested type name: types.ExternalIdentity
							Schema: map[string]*schema.Schema{
								"connector_id": {
									Type:     schema.TypeString,
									Optional: true,
								},
								"username": {
									Type:     schema.TypeString,
									Optional: true,
								},
							},
						},
					},
					"github_identities": {
						Type:     schema.TypeList,
						Optional: true,
						Elem: &schema.Resource{
							// nested type name: types.ExternalIdentity
							Schema: map[string]*schema.Schema{
								"connector_id": {
									Type:     schema.TypeString,
									Optional: true,
								},
								"username": {
									Type:     schema.TypeString,
									Optional: true,
								},
							},
						},
					},
					"roles": {
						Type:     schema.TypeList,
						Optional: true,
						Elem:     &schema.Schema{Type: schema.TypeString},
					},
					"traits": {
						Type:     schema.TypeList,
						Optional: true,
						MaxItems: 1,
						Elem: &schema.Resource{
							// nested type name: wrappers.LabelValues
							Schema: map[string]*schema.Schema{
								"values": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: wrappers.LabelValues.ValuesEntry
										Schema: map[string]*schema.Schema{
											"key": {
												Type:     schema.TypeString,
												Optional: true,
											},
											"value": {
												Type:     schema.TypeList,
												Optional: true,
												MaxItems: 1,
												Elem: &schema.Resource{
													// nested type name: wrappers.StringValues
													Schema: map[string]*schema.Schema{
														"values": {
															Type:     schema.TypeList,
															Optional: true,
															Elem:     &schema.Schema{Type: schema.TypeString},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					"status": {
						Type:     schema.TypeList,
						Optional: true,
						MaxItems: 1,
						Elem: &schema.Resource{
							// nested type name: types.LoginStatus
							Schema: map[string]*schema.Schema{
								"is_locked": {
									Type:     schema.TypeBool,
									Optional: true,
								},
								"locked_message": {
									Type:     schema.TypeString,
									Optional: true,
								},
								"locked_time": {
									Type:         schema.TypeString,
									Optional:     true,
									ValidateFunc: validation.IsRFC3339Time,
								},
								"lock_expires": {
									Type:         schema.TypeString,
									Optional:     true,
									ValidateFunc: validation.IsRFC3339Time,
								},
							},
						},
					},
					"expires": {
						Type:         schema.TypeString,
						Optional:     true,
						ValidateFunc: validation.IsRFC3339Time,
					},
					"created_by": {
						Type:     schema.TypeList,
						Optional: true,
						MaxItems: 1,
						Elem: &schema.Resource{
							// nested type name: types.CreatedBy
							Schema: map[string]*schema.Schema{
								"connector": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: types.ConnectorRef
										Schema: map[string]*schema.Schema{
											"type": {
												Type:     schema.TypeString,
												Optional: true,
											},
											"id": {
												Type:     schema.TypeString,
												Optional: true,
											},
											"identity": {
												Type:     schema.TypeString,
												Optional: true,
											},
										},
									},
								},
								"time": {
									Type:         schema.TypeString,
									Optional:     true,
									ValidateFunc: validation.IsRFC3339Time,
								},
								"user": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: types.UserRef
										Schema: map[string]*schema.Schema{
											"name": {
												Type:     schema.TypeString,
												Optional: true,
											},
										},
									},
								},
							},
						},
					},
					"local_auth": {
						Type:     schema.TypeList,
						Optional: true,
						MaxItems: 1,
						Elem: &schema.Resource{
							// nested type name: types.LocalAuthSecrets
							Schema: map[string]*schema.Schema{
								"password_hash": {
									Type:     schema.TypeString,
									Optional: true,
								},
								"totp_key": {
									Type:     schema.TypeString,
									Optional: true,
								},
								"u2_f_registration": {
									Type:     schema.TypeList,
									Optional: true,
									MaxItems: 1,
									Elem: &schema.Resource{
										// nested type name: types.U2FRegistrationData
										Schema: map[string]*schema.Schema{
											"raw": {
												Type:     schema.TypeString,
												Optional: true,
											},
											"key_handle": {
												Type:     schema.TypeString,
												Optional: true,
											},
											"pub_key": {
												Type:     schema.TypeString,
												Optional: true,
											},
										},
									},
								},
								"u2_f_counter": {
									Type:     schema.TypeInt,
									Optional: true,
								},
							},
						},
					},
				},
			},
		},
	}
}
