// DO NOT EDIT.
// Code is generated by protoc-gen-tfschema 0.0.2
// Using protoc v3.14.0

package tfschema

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
)

// Type full name: types.AWS
func SchemaAWS() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.AWS.Region
		"region": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.AccessCapabilities
func SchemaAccessCapabilities() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.AccessCapabilities.RequestableRoles
		"requestable_roles": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
	}
}

// Type full name: types.AccessCapabilitiesRequest
func SchemaAccessCapabilitiesRequest() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.AccessCapabilitiesRequest.RequestableRoles
		"requestable_roles": {
			Type:     schema.TypeBool,
			Optional: true,
		},
		// types.AccessCapabilitiesRequest.User
		"user": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.AccessRequestClaimMapping
func SchemaAccessRequestClaimMapping() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.AccessRequestClaimMapping.Claim
		"claim": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.AccessRequestClaimMapping.Roles
		"roles": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.AccessRequestClaimMapping.Value
		"value": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.AccessRequestConditions
func SchemaAccessRequestConditions() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.AccessRequestConditions.Annotations
		"annotations": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaLabelValues(),
			},
		},
		// types.AccessRequestConditions.ClaimsToRoles
		"claims_to_roles": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaAccessRequestClaimMapping(),
			},
		},
		// types.AccessRequestConditions.Roles
		"roles": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
	}
}

// Type full name: types.AccessRequestFilter
func SchemaAccessRequestFilter() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.AccessRequestFilter.ID
		"id": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.AccessRequestFilter.State
		"state": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.AccessRequestFilter.User
		"user": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.AccessRequestSpecV3
func SchemaAccessRequestSpecV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.AccessRequestSpecV3.Created
		"created": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.AccessRequestSpecV3.Expires
		"expires": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.AccessRequestSpecV3.RequestReason
		"request_reason": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.AccessRequestSpecV3.ResolveAnnotations
		"resolve_annotations": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaLabelValues(),
			},
		},
		// types.AccessRequestSpecV3.ResolveReason
		"resolve_reason": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.AccessRequestSpecV3.Roles
		"roles": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.AccessRequestSpecV3.State
		"state": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.AccessRequestSpecV3.SystemAnnotations
		"system_annotations": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaLabelValues(),
			},
		},
		// types.AccessRequestSpecV3.User
		"user": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.AccessRequestV3
func SchemaAccessRequestV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.AccessRequestV3.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.AccessRequestV3.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.AccessRequestV3.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaAccessRequestSpecV3(),
			},
		},
		// types.AccessRequestV3.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.AccessRequestV3.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.AcquireSemaphoreRequest
func SchemaAcquireSemaphoreRequest() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.AcquireSemaphoreRequest.Expires
		"expires": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.AcquireSemaphoreRequest.Holder
		"holder": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.AcquireSemaphoreRequest.MaxLeases
		"max_leases": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.AcquireSemaphoreRequest.SemaphoreKind
		"semaphore_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.AcquireSemaphoreRequest.SemaphoreName
		"semaphore_name": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.App
func SchemaApp() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.App.DynamicLabels
		"dynamic_labels": {
			Type:     schema.TypeMap,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaCommandLabelV2(),
			},
		},
		// types.App.InsecureSkipVerify
		"insecure_skip_verify": {
			Type:     schema.TypeBool,
			Optional: true,
		},
		// types.App.Name
		"name": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.App.PublicAddr
		"public_addr": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.App.Rewrite
		"rewrite": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaRewrite(),
			},
		},
		// types.App.StaticLabels
		"static_labels": {
			Type:     schema.TypeMap,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.App.URI
		"uri": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.AuditConfig
func SchemaAuditConfig() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.AuditConfig.AuditEventsURI
		"audit_events_uri": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaStringValues(),
			},
		},
		// types.AuditConfig.AuditSessionsURI
		"audit_sessions_uri": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.AuditConfig.AuditTableName
		"audit_table_name": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.AuditConfig.EnableAutoScaling
		"enable_auto_scaling": {
			Type:     schema.TypeBool,
			Optional: true,
		},
		// types.AuditConfig.EnableContinuousBackups
		"enable_continuous_backups": {
			Type:     schema.TypeBool,
			Optional: true,
		},
		// types.AuditConfig.ReadMaxCapacity
		"read_max_capacity": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.AuditConfig.ReadMinCapacity
		"read_min_capacity": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.AuditConfig.ReadTargetValue
		"read_target_value": {
			Type:     schema.TypeFloat,
			Optional: true,
		},
		// types.AuditConfig.Region
		"region": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.AuditConfig.Type
		"type": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.AuditConfig.WriteMaxCapacity
		"write_max_capacity": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.AuditConfig.WriteMinCapacity
		"write_min_capacity": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.AuditConfig.WriteTargetValue
		"write_target_value": {
			Type:     schema.TypeFloat,
			Optional: true,
		},
	}
}

// Type full name: types.BoolValue
func SchemaBoolValue() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.BoolValue.Value
		"value": {
			Type:     schema.TypeBool,
			Optional: true,
		},
	}
}

// Type full name: types.CertAuthoritySpecV2
func SchemaCertAuthoritySpecV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.CertAuthoritySpecV2.CheckingKeys
		"checking_keys": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.CertAuthoritySpecV2.ClusterName
		"cluster_name": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.CertAuthoritySpecV2.JWTKeyPairs
		"jwt_key_pairs": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaJWTKeyPair(),
			},
		},
		// types.CertAuthoritySpecV2.RoleMap
		"role_map": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaRoleMapping(),
			},
		},
		// types.CertAuthoritySpecV2.Roles
		"roles": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.CertAuthoritySpecV2.Rotation
		"rotation": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaRotation(),
			},
		},
		// types.CertAuthoritySpecV2.SigningAlg
		"signing_alg": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.CertAuthoritySpecV2.SigningKeys
		"signing_keys": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.CertAuthoritySpecV2.TLSKeyPairs
		"tls_key_pairs": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaTLSKeyPair(),
			},
		},
		// types.CertAuthoritySpecV2.Type
		"type": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.CertAuthorityV2
func SchemaCertAuthorityV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.CertAuthorityV2.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.CertAuthorityV2.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.CertAuthorityV2.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaCertAuthoritySpecV2(),
			},
		},
		// types.CertAuthorityV2.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.CertAuthorityV2.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ClusterConfigSpecV3
func SchemaClusterConfigSpecV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ClusterConfigSpecV3.Audit
		"audit": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaAuditConfig(),
			},
		},
		// types.ClusterConfigSpecV3.ClientIdleTimeout
		"client_idle_timeout": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.ClusterConfigSpecV3.ClusterID
		"cluster_id": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ClusterConfigSpecV3.DisconnectExpiredCert
		"disconnect_expired_cert": {
			Type:     schema.TypeBool,
			Optional: true,
		},
		// types.ClusterConfigSpecV3.KeepAliveCountMax
		"keep_alive_count_max": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.ClusterConfigSpecV3.KeepAliveInterval
		"keep_alive_interval": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.ClusterConfigSpecV3.LocalAuth
		"local_auth": {
			Type:     schema.TypeBool,
			Optional: true,
		},
		// types.ClusterConfigSpecV3.ProxyChecksHostKeys
		"proxy_checks_host_keys": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ClusterConfigSpecV3.SessionControlTimeout
		"session_control_timeout": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.ClusterConfigSpecV3.SessionRecording
		"session_recording": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ClusterConfigV3
func SchemaClusterConfigV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ClusterConfigV3.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ClusterConfigV3.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.ClusterConfigV3.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaClusterConfigSpecV3(),
			},
		},
		// types.ClusterConfigV3.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ClusterConfigV3.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ClusterNameSpecV2
func SchemaClusterNameSpecV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ClusterNameSpecV2.ClusterName
		"cluster_name": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ClusterNameV2
func SchemaClusterNameV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ClusterNameV2.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ClusterNameV2.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.ClusterNameV2.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaClusterNameSpecV2(),
			},
		},
		// types.ClusterNameV2.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ClusterNameV2.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.CommandLabelV2
func SchemaCommandLabelV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.CommandLabelV2.Command
		"command": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.CommandLabelV2.Period
		"period": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.CommandLabelV2.Result
		"result": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ConnectorRef
func SchemaConnectorRef() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ConnectorRef.ID
		"id": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ConnectorRef.Identity
		"identity": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ConnectorRef.Type
		"type": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.CreatedBy
func SchemaCreatedBy() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.CreatedBy.Connector
		"connector": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaConnectorRef(),
			},
		},
		// types.CreatedBy.Time
		"time": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.CreatedBy.User
		"user": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaUserRef(),
			},
		},
	}
}

// Type full name: types.DatabaseServerSpecV3
func SchemaDatabaseServerSpecV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.DatabaseServerSpecV3.AWS
		"aws": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaAWS(),
			},
		},
		// types.DatabaseServerSpecV3.CACert
		"ca_cert": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.DatabaseServerSpecV3.Description
		"description": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.DatabaseServerSpecV3.DynamicLabels
		"dynamic_labels": {
			Type:     schema.TypeMap,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaCommandLabelV2(),
			},
		},
		// types.DatabaseServerSpecV3.HostID
		"host_id": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.DatabaseServerSpecV3.Hostname
		"hostname": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.DatabaseServerSpecV3.Protocol
		"protocol": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.DatabaseServerSpecV3.Rotation
		"rotation": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaRotation(),
			},
		},
		// types.DatabaseServerSpecV3.URI
		"uri": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.DatabaseServerSpecV3.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.DatabaseServerV3
func SchemaDatabaseServerV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.DatabaseServerV3.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.DatabaseServerV3.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.DatabaseServerV3.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaDatabaseServerSpecV3(),
			},
		},
		// types.DatabaseServerV3.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.DatabaseServerV3.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ExternalIdentity
func SchemaExternalIdentity() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ExternalIdentity.ConnectorID
		"connector_id": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ExternalIdentity.Username
		"username": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.JWTKeyPair
func SchemaJWTKeyPair() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.JWTKeyPair.PrivateKey
		"private_key": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.JWTKeyPair.PublicKey
		"public_key": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.KeepAlive
func SchemaKeepAlive() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.KeepAlive.Expires
		"expires": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.KeepAlive.HostID
		"host_id": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.KeepAlive.LeaseID
		"lease_id": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.KeepAlive.Name
		"name": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.KeepAlive.Namespace
		"namespace": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.KeepAlive.Type
		"type": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.KubernetesCluster
func SchemaKubernetesCluster() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.KubernetesCluster.DynamicLabels
		"dynamic_labels": {
			Type:     schema.TypeMap,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaCommandLabelV2(),
			},
		},
		// types.KubernetesCluster.Name
		"name": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.KubernetesCluster.StaticLabels
		"static_labels": {
			Type:     schema.TypeMap,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
	}
}

// Type full name: wrappers.LabelValues
func SchemaLabelValues() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// wrappers.LabelValues.Values
		"values": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaStringValues(),
			},
		},
	}
}

// Type full name: types.LocalAuthSecrets
func SchemaLocalAuthSecrets() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.LocalAuthSecrets.PasswordHash
		"password_hash": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.LocalAuthSecrets.TOTPKey
		"totp_key": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.LocalAuthSecrets.U2FCounter
		"u2f_counter": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.LocalAuthSecrets.U2FRegistration
		"u2f_registration": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaU2FRegistrationData(),
			},
		},
	}
}

// Type full name: types.LoginStatus
func SchemaLoginStatus() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.LoginStatus.IsLocked
		"is_locked": {
			Type:     schema.TypeBool,
			Optional: true,
		},
		// types.LoginStatus.LockExpires
		"lock_expires": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.LoginStatus.LockedMessage
		"locked_message": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.LoginStatus.LockedTime
		"locked_time": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
	}
}

// Type full name: types.Metadata
func SchemaMetadata() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.Metadata.Description
		"description": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.Metadata.Expires
		"expires": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.Metadata.ID
		"id": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.Metadata.Labels
		"labels": {
			Type:     schema.TypeMap,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.Metadata.Name
		"name": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.Metadata.Namespace
		"namespace": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.Namespace
func SchemaNamespace() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.Namespace.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.Namespace.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.Namespace.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaNamespaceSpec(),
			},
		},
		// types.Namespace.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.Namespace.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.NamespaceSpec
func SchemaNamespaceSpec() map[string]*schema.Schema {
	return map[string]*schema.Schema{}
}

// Type full name: types.PluginDataEntry
func SchemaPluginDataEntry() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.PluginDataEntry.Data
		"data": {
			Type:     schema.TypeMap,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
	}
}

// Type full name: types.PluginDataFilter
func SchemaPluginDataFilter() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.PluginDataFilter.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.PluginDataFilter.Plugin
		"plugin": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.PluginDataFilter.Resource
		"resource": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.PluginDataSpecV3
func SchemaPluginDataSpecV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.PluginDataSpecV3.Entries
		"entries": {
			Type:     schema.TypeMap,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaPluginDataEntry(),
			},
		},
	}
}

// Type full name: types.PluginDataUpdateParams
func SchemaPluginDataUpdateParams() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.PluginDataUpdateParams.Expect
		"expect": {
			Type:     schema.TypeMap,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.PluginDataUpdateParams.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.PluginDataUpdateParams.Plugin
		"plugin": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.PluginDataUpdateParams.Resource
		"resource": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.PluginDataUpdateParams.Set
		"set": {
			Type:     schema.TypeMap,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
	}
}

// Type full name: types.PluginDataV3
func SchemaPluginDataV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.PluginDataV3.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.PluginDataV3.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.PluginDataV3.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaPluginDataSpecV3(),
			},
		},
		// types.PluginDataV3.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.PluginDataV3.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ProvisionTokenSpecV2
func SchemaProvisionTokenSpecV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ProvisionTokenSpecV2.Roles
		"roles": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
	}
}

// Type full name: types.ProvisionTokenV1
func SchemaProvisionTokenV1() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ProvisionTokenV1.Expires
		"expires": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.ProvisionTokenV1.Roles
		"roles": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.ProvisionTokenV1.Token
		"token": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ProvisionTokenV2
func SchemaProvisionTokenV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ProvisionTokenV2.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ProvisionTokenV2.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.ProvisionTokenV2.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaProvisionTokenSpecV2(),
			},
		},
		// types.ProvisionTokenV2.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ProvisionTokenV2.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.RemoteClusterStatusV3
func SchemaRemoteClusterStatusV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.RemoteClusterStatusV3.Connection
		"connection": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.RemoteClusterStatusV3.LastHeartbeat
		"last_heartbeat": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
	}
}

// Type full name: types.RemoteClusterV3
func SchemaRemoteClusterV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.RemoteClusterV3.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.RemoteClusterV3.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.RemoteClusterV3.Status
		"status": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaRemoteClusterStatusV3(),
			},
		},
		// types.RemoteClusterV3.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.RemoteClusterV3.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ResetPasswordTokenSecretsSpecV3
func SchemaResetPasswordTokenSecretsSpecV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ResetPasswordTokenSecretsSpecV3.Created
		"created": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.ResetPasswordTokenSecretsSpecV3.OTPKey
		"otp_key": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ResetPasswordTokenSecretsSpecV3.QRCode
		"qr_code": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ResetPasswordTokenSecretsV3
func SchemaResetPasswordTokenSecretsV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ResetPasswordTokenSecretsV3.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ResetPasswordTokenSecretsV3.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.ResetPasswordTokenSecretsV3.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaResetPasswordTokenSecretsSpecV3(),
			},
		},
		// types.ResetPasswordTokenSecretsV3.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ResetPasswordTokenSecretsV3.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ResetPasswordTokenSpecV3
func SchemaResetPasswordTokenSpecV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ResetPasswordTokenSpecV3.Created
		"created": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.ResetPasswordTokenSpecV3.URL
		"url": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ResetPasswordTokenSpecV3.User
		"user": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ResetPasswordTokenV3
func SchemaResetPasswordTokenV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ResetPasswordTokenV3.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ResetPasswordTokenV3.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.ResetPasswordTokenV3.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaResetPasswordTokenSpecV3(),
			},
		},
		// types.ResetPasswordTokenV3.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ResetPasswordTokenV3.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ResourceHeader
func SchemaResourceHeader() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ResourceHeader.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ResourceHeader.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.ResourceHeader.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ResourceHeader.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ReverseTunnelSpecV2
func SchemaReverseTunnelSpecV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ReverseTunnelSpecV2.ClusterName
		"cluster_name": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ReverseTunnelSpecV2.DialAddrs
		"dial_addrs": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.ReverseTunnelSpecV2.Type
		"type": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ReverseTunnelV2
func SchemaReverseTunnelV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ReverseTunnelV2.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ReverseTunnelV2.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.ReverseTunnelV2.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaReverseTunnelSpecV2(),
			},
		},
		// types.ReverseTunnelV2.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ReverseTunnelV2.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.Rewrite
func SchemaRewrite() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.Rewrite.Redirect
		"redirect": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
	}
}

// Type full name: types.RoleConditions
func SchemaRoleConditions() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.RoleConditions.AppLabels
		"app_labels": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaLabelValues(),
			},
		},
		// types.RoleConditions.ClusterLabels
		"cluster_labels": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaLabelValues(),
			},
		},
		// types.RoleConditions.DatabaseLabels
		"database_labels": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaLabelValues(),
			},
		},
		// types.RoleConditions.DatabaseNames
		"database_names": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.RoleConditions.DatabaseUsers
		"database_users": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.RoleConditions.KubeGroups
		"kube_groups": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.RoleConditions.KubeUsers
		"kube_users": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.RoleConditions.KubernetesLabels
		"kubernetes_labels": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaLabelValues(),
			},
		},
		// types.RoleConditions.Logins
		"logins": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.RoleConditions.Namespaces
		"namespaces": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.RoleConditions.NodeLabels
		"node_labels": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaLabelValues(),
			},
		},
		// types.RoleConditions.Request
		"request": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaAccessRequestConditions(),
			},
		},
		// types.RoleConditions.Rules
		"rules": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaRule(),
			},
		},
	}
}

// Type full name: types.RoleMapping
func SchemaRoleMapping() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.RoleMapping.Local
		"local": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.RoleMapping.Remote
		"remote": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.RoleOptions
func SchemaRoleOptions() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.RoleOptions.BPF
		"bpf": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.RoleOptions.CertificateFormat
		"certificate_format": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.RoleOptions.ClientIdleTimeout
		"client_idle_timeout": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.RoleOptions.DisconnectExpiredCert
		"disconnect_expired_cert": {
			Type:     schema.TypeBool,
			Optional: true,
		},
		// types.RoleOptions.ForwardAgent
		"forward_agent": {
			Type:     schema.TypeBool,
			Optional: true,
		},
		// types.RoleOptions.MaxConnections
		"max_connections": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.RoleOptions.MaxSessionTTL
		"max_session_ttl": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.RoleOptions.MaxSessions
		"max_sessions": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.RoleOptions.PermitX11Forwarding
		"permit_x11forwarding": {
			Type:     schema.TypeBool,
			Optional: true,
		},
		// types.RoleOptions.PortForwarding
		"port_forwarding": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaBoolValue(),
			},
		},
		// types.RoleOptions.RequestAccess
		"request_access": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.RoleOptions.RequestPrompt
		"request_prompt": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.RoleSpecV3
func SchemaRoleSpecV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.RoleSpecV3.Allow
		"allow": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaRoleConditions(),
			},
		},
		// types.RoleSpecV3.Deny
		"deny": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaRoleConditions(),
			},
		},
		// types.RoleSpecV3.Options
		"options": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaRoleOptions(),
			},
		},
	}
}

// Type full name: types.RoleV3
func SchemaRoleV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.RoleV3.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.RoleV3.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.RoleV3.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaRoleSpecV3(),
			},
		},
		// types.RoleV3.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.RoleV3.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.Rotation
func SchemaRotation() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.Rotation.CurrentID
		"current_id": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.Rotation.GracePeriod
		"grace_period": {
			Type:     schema.TypeInt,
			Optional: true,
		},
		// types.Rotation.LastRotated
		"last_rotated": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.Rotation.Mode
		"mode": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.Rotation.Phase
		"phase": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.Rotation.Schedule
		"schedule": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaRotationSchedule(),
			},
		},
		// types.Rotation.Started
		"started": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.Rotation.State
		"state": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.RotationSchedule
func SchemaRotationSchedule() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.RotationSchedule.Standby
		"standby": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.RotationSchedule.UpdateClients
		"update_clients": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.RotationSchedule.UpdateServers
		"update_servers": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
	}
}

// Type full name: types.Rule
func SchemaRule() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.Rule.Actions
		"actions": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.Rule.Resources
		"resources": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.Rule.Verbs
		"verbs": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.Rule.Where
		"where": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.SemaphoreFilter
func SchemaSemaphoreFilter() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.SemaphoreFilter.SemaphoreKind
		"semaphore_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.SemaphoreFilter.SemaphoreName
		"semaphore_name": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.SemaphoreLease
func SchemaSemaphoreLease() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.SemaphoreLease.Expires
		"expires": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.SemaphoreLease.LeaseID
		"lease_id": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.SemaphoreLease.SemaphoreKind
		"semaphore_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.SemaphoreLease.SemaphoreName
		"semaphore_name": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.SemaphoreLeaseRef
func SchemaSemaphoreLeaseRef() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.SemaphoreLeaseRef.Expires
		"expires": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.SemaphoreLeaseRef.Holder
		"holder": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.SemaphoreLeaseRef.LeaseID
		"lease_id": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.SemaphoreSpecV3
func SchemaSemaphoreSpecV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.SemaphoreSpecV3.Leases
		"leases": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaSemaphoreLeaseRef(),
			},
		},
	}
}

// Type full name: types.SemaphoreV3
func SchemaSemaphoreV3() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.SemaphoreV3.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.SemaphoreV3.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.SemaphoreV3.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaSemaphoreSpecV3(),
			},
		},
		// types.SemaphoreV3.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.SemaphoreV3.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ServerSpecV2
func SchemaServerSpecV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ServerSpecV2.Addr
		"addr": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ServerSpecV2.Apps
		"apps": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaApp(),
			},
		},
		// types.ServerSpecV2.CmdLabels
		"cmd_labels": {
			Type:     schema.TypeMap,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaCommandLabelV2(),
			},
		},
		// types.ServerSpecV2.Hostname
		"hostname": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ServerSpecV2.KubernetesClusters
		"kubernetes_clusters": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaKubernetesCluster(),
			},
		},
		// types.ServerSpecV2.PublicAddr
		"public_addr": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ServerSpecV2.Rotation
		"rotation": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaRotation(),
			},
		},
		// types.ServerSpecV2.UseTunnel
		"use_tunnel": {
			Type:     schema.TypeBool,
			Optional: true,
		},
		// types.ServerSpecV2.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.ServerV2
func SchemaServerV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.ServerV2.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ServerV2.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.ServerV2.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaServerSpecV2(),
			},
		},
		// types.ServerV2.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.ServerV2.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.StaticTokensSpecV2
func SchemaStaticTokensSpecV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.StaticTokensSpecV2.StaticTokens
		"static_tokens": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaProvisionTokenV1(),
			},
		},
	}
}

// Type full name: types.StaticTokensV2
func SchemaStaticTokensV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.StaticTokensV2.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.StaticTokensV2.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.StaticTokensV2.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaStaticTokensSpecV2(),
			},
		},
		// types.StaticTokensV2.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.StaticTokensV2.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: wrappers.StringValues
func SchemaStringValues() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// wrappers.StringValues.Values
		"values": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
	}
}

// Type full name: types.TLSKeyPair
func SchemaTLSKeyPair() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.TLSKeyPair.Cert
		"cert": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.TLSKeyPair.Key
		"key": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.TunnelConnectionSpecV2
func SchemaTunnelConnectionSpecV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.TunnelConnectionSpecV2.ClusterName
		"cluster_name": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.TunnelConnectionSpecV2.LastHeartbeat
		"last_heartbeat": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.TunnelConnectionSpecV2.ProxyName
		"proxy_name": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.TunnelConnectionSpecV2.Type
		"type": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.TunnelConnectionV2
func SchemaTunnelConnectionV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.TunnelConnectionV2.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.TunnelConnectionV2.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.TunnelConnectionV2.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaTunnelConnectionSpecV2(),
			},
		},
		// types.TunnelConnectionV2.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.TunnelConnectionV2.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.U2FRegistrationData
func SchemaU2FRegistrationData() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.U2FRegistrationData.KeyHandle
		"key_handle": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.U2FRegistrationData.PubKey
		"pub_key": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.U2FRegistrationData.Raw
		"raw": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.UserRef
func SchemaUserRef() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.UserRef.Name
		"name": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.UserSpecV2
func SchemaUserSpecV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.UserSpecV2.CreatedBy
		"created_by": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaCreatedBy(),
			},
		},
		// types.UserSpecV2.Expires
		"expires": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.UserSpecV2.GithubIdentities
		"github_identities": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaExternalIdentity(),
			},
		},
		// types.UserSpecV2.LocalAuth
		"local_auth": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaLocalAuthSecrets(),
			},
		},
		// types.UserSpecV2.OIDCIdentities
		"oidc_identities": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaExternalIdentity(),
			},
		},
		// types.UserSpecV2.Roles
		"roles": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// types.UserSpecV2.SAMLIdentities
		"saml_identities": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Resource{
				Schema: SchemaExternalIdentity(),
			},
		},
		// types.UserSpecV2.Status
		"status": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaLoginStatus(),
			},
		},
		// types.UserSpecV2.Traits
		"traits": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaLabelValues(),
			},
		},
	}
}

// Type full name: types.UserV2
func SchemaUserV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.UserV2.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.UserV2.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.UserV2.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaUserSpecV2(),
			},
		},
		// types.UserV2.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.UserV2.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.WebSessionSpecV2
func SchemaWebSessionSpecV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.WebSessionSpecV2.BearerToken
		"bearer_token": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.WebSessionSpecV2.BearerTokenExpires
		"bearer_token_expires": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.WebSessionSpecV2.Expires
		"expires": {
			Type:         schema.TypeString,
			Optional:     true,
			ValidateFunc: validation.IsRFC3339Time,
		},
		// types.WebSessionSpecV2.Priv
		"priv": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.WebSessionSpecV2.Pub
		"pub": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.WebSessionSpecV2.TLSCert
		"tls_cert": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.WebSessionSpecV2.User
		"user": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}

// Type full name: types.WebSessionV2
func SchemaWebSessionV2() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// types.WebSessionV2.Kind
		"kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.WebSessionV2.Metadata
		"metadata": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaMetadata(),
			},
		},
		// types.WebSessionV2.Spec
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: SchemaWebSessionSpecV2(),
			},
		},
		// types.WebSessionV2.SubKind
		"sub_kind": {
			Type:     schema.TypeString,
			Optional: true,
		},
		// types.WebSessionV2.Version
		"version": {
			Type:     schema.TypeString,
			Optional: true,
		},
	}
}
