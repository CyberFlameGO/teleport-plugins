// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2021 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/gravitational/teleport-plugins/terraform/tfschema"
	apitypes "github.com/gravitational/teleport/api/types"
)

// resourceTeleportAuthPreferenceType is the resource metadata type
type resourceTeleportAuthPreferenceType struct{}

// resourceTeleportAuthPreference is the resource
type resourceTeleportAuthPreference struct {
	p provider
}

// GetSchema returns the resource schema
func (r resourceTeleportAuthPreferenceType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfschema.GenSchemaAuthPreferenceV2(ctx)
}

// NewResource creates the empty resource
func (r resourceTeleportAuthPreferenceType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceTeleportAuthPreference{
		p: *(p.(*provider)),
	}, nil
}

// Create creates the provision token
func (r resourceTeleportAuthPreference) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	authPreference := &apitypes.AuthPreferenceV2{}
	diags = tfschema.CopyAuthPreferenceV2FromTerraform(ctx, plan, authPreference)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := authPreference.CheckAndSetDefaults()
	if err != nil {
		resp.Diagnostics.AddError("Error setting AuthPreference defaults", err.Error())
		return
	}

	err = r.p.Client.SetAuthPreference(ctx, authPreference)
	if err != nil {
		resp.Diagnostics.AddError("Error creating AuthPreference", err.Error())
		return
	}

	authPreferenceI, err := r.p.Client.GetAuthPreference(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Error reading AuthPreference", err.Error())
		return
	}

	authPreference, ok := authPreferenceI.(*apitypes.AuthPreferenceV2)
	if !ok {
		resp.Diagnostics.AddError("Error reading AuthPreference", fmt.Sprintf("Can not convert %T to AuthPreferenceV2", authPreferenceI))
		return
	}

	diags = tfschema.CopyAuthPreferenceV2ToTerraform(ctx, *authPreference, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read reads teleport AuthPreference
func (r resourceTeleportAuthPreference) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state types.Object
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	authPreferenceI, err := r.p.Client.GetAuthPreference(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Error reading AuthPreference", err.Error())
		return
	}

	authPreference := authPreferenceI.(*apitypes.AuthPreferenceV2)
	diags = tfschema.CopyAuthPreferenceV2ToTerraform(ctx, *authPreference, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Update updates teleport AuthPreference
func (r resourceTeleportAuthPreference) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	authPreference := &apitypes.AuthPreferenceV2{}
	diags = tfschema.CopyAuthPreferenceV2FromTerraform(ctx, plan, authPreference)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := authPreference.CheckAndSetDefaults()
	if err != nil {
		resp.Diagnostics.AddError("Error updating AuthPreference", err.Error())
		return
	}

	err = r.p.Client.SetAuthPreference(ctx, authPreference)
	if err != nil {
		resp.Diagnostics.AddError("Error updating AuthPreference", err.Error())
		return
	}

	authPreferenceI, err := r.p.Client.GetAuthPreference(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Error reading AuthPreference", err.Error())
		return
	}

	authPreference = authPreferenceI.(*apitypes.AuthPreferenceV2)
	diags = tfschema.CopyAuthPreferenceV2ToTerraform(ctx, *authPreference, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Delete deletes Teleport AuthPreference
func (r resourceTeleportAuthPreference) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	err := r.p.Client.ResetAuthPreference(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Error deleting AuthPreferenceV2", err.Error())
		return
	}

	resp.State.RemoveResource(ctx)
}

// ImportState imports AuthPreference state
func (r resourceTeleportAuthPreference) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	authPreferenceI, err := r.p.Client.GetAuthPreference(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Error reading AuthPreference", err.Error())
		return
	}

	authPreference := authPreferenceI.(*apitypes.AuthPreferenceV2)

	var state types.Object

	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = tfschema.CopyAuthPreferenceV2ToTerraform(ctx, *authPreference, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	state.Attrs["id"] = types.String{Value: authPreference.Metadata.Name}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
