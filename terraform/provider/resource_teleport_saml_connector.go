// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2021 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-go/tftypes"

	"github.com/gravitational/teleport-plugins/terraform/tfschema"
	apitypes "github.com/gravitational/teleport/api/types"
)

// resourceTeleportSAMLConnectorType is the resource metadata type
type resourceTeleportSAMLConnectorType struct{}

// resourceTeleportSAMLConnector is the resource
type resourceTeleportSAMLConnector struct {
	p provider
}

// GetSchema returns the resource schema
func (r resourceTeleportSAMLConnectorType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfschema.GenSchemaSAMLConnectorV2(ctx)
}

// NewResource creates the empty resource
func (r resourceTeleportSAMLConnectorType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceTeleportSAMLConnector{
		p: *(p.(*provider)),
	}, nil
}

// Create creates the provision token
func (r resourceTeleportSAMLConnector) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	samlConnector := &apitypes.SAMLConnectorV2{}
	diags = tfschema.CopySAMLConnectorV2FromTerraform(ctx, plan, samlConnector)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := samlConnector.CheckAndSetDefaults()
	if err != nil {
		resp.Diagnostics.AddError("Error setting SAMLConnector defaults", err.Error())
		return
	}

	err = r.p.Client.UpsertSAMLConnector(ctx, samlConnector)
	if err != nil {
		resp.Diagnostics.AddError("Error creating SAMLConnector", err.Error())
		return
	}

	id := samlConnector.Metadata.Name
	samlConnectorI, err := r.p.Client.GetSAMLConnector(ctx, id, true)
	if err != nil {
		resp.Diagnostics.AddError("Error reading SAMLConnector", err.Error())
		return
	}

	samlConnector, ok := samlConnectorI.(*apitypes.SAMLConnectorV2)
	if !ok {
		resp.Diagnostics.AddError("Error reading SAMLConnector", fmt.Sprintf("Can not convert %T to SAMLConnectorV2", samlConnectorI))
		return
	}

	diags = tfschema.CopySAMLConnectorV2ToTerraform(ctx, *samlConnector, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read reads teleport SAMLConnector
func (r resourceTeleportSAMLConnector) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state types.Object
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var id types.String
	diags = req.State.GetAttribute(ctx, tftypes.NewAttributePath().WithAttributeName("metadata").WithAttributeName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	samlConnectorI, err := r.p.Client.GetSAMLConnector(ctx, id.Value, true)
	if err != nil {
		resp.Diagnostics.AddError("Error reading SAMLConnector", err.Error())
		return
	}

	samlConnector := samlConnectorI.(*apitypes.SAMLConnectorV2)
	diags = tfschema.CopySAMLConnectorV2ToTerraform(ctx, *samlConnector, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Update updates teleport SAMLConnector
func (r resourceTeleportSAMLConnector) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	samlConnector := &apitypes.SAMLConnectorV2{}
	diags = tfschema.CopySAMLConnectorV2FromTerraform(ctx, plan, samlConnector)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	name := samlConnector.Metadata.Name

	err := samlConnector.CheckAndSetDefaults()
	if err != nil {
		resp.Diagnostics.AddError("Error updating SAMLConnector", err.Error())
		return
	}

	err = r.p.Client.UpsertSAMLConnector(ctx, samlConnector)
	if err != nil {
		resp.Diagnostics.AddError("Error updating SAMLConnector", err.Error())
		return
	}

	samlConnectorI, err := r.p.Client.GetSAMLConnector(ctx, name, true)
	if err != nil {
		resp.Diagnostics.AddError("Error reading SAMLConnector", err.Error())
		return
	}

	samlConnector = samlConnectorI.(*apitypes.SAMLConnectorV2)
	diags = tfschema.CopySAMLConnectorV2ToTerraform(ctx, *samlConnector, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Delete deletes Teleport SAMLConnector
func (r resourceTeleportSAMLConnector) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	var id types.String
	diags := req.State.GetAttribute(ctx, tftypes.NewAttributePath().WithAttributeName("metadata").WithAttributeName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.p.Client.DeleteSAMLConnector(ctx, id.Value)
	if err != nil {
		resp.Diagnostics.AddError("Error deleting SAMLConnectorV2", err.Error())
		return
	}

	resp.State.RemoveResource(ctx)
}

// ImportState imports SAMLConnector state
func (r resourceTeleportSAMLConnector) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	samlConnectorI, err := r.p.Client.GetSAMLConnector(ctx, req.ID, true)
	if err != nil {
		resp.Diagnostics.AddError("Error reading SAMLConnector", err.Error())
		return
	}

	samlConnector := samlConnectorI.(*apitypes.SAMLConnectorV2)

	var state types.Object

	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = tfschema.CopySAMLConnectorV2ToTerraform(ctx, *samlConnector, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	state.Attrs["id"] = types.String{Value: samlConnector.Metadata.Name}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
