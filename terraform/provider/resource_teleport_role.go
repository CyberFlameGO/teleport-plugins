// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2021 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-go/tftypes"

	"github.com/gravitational/teleport-plugins/terraform/tfschema"
	apitypes "github.com/gravitational/teleport/api/types"
)

// resourceTeleportRoleType is the resource metadata type
type resourceTeleportRoleType struct{}

// resourceTeleportRole is the resource
type resourceTeleportRole struct {
	p Provider
}

// GetSchema returns the resource schema
func (r resourceTeleportRoleType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfschema.GenSchemaRoleV4(ctx)
}

// NewResource creates the empty resource
func (r resourceTeleportRoleType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceTeleportRole{
		p: *(p.(*Provider)),
	}, nil
}

// Create creates the provision token
func (r resourceTeleportRole) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	role := &apitypes.RoleV4{}
	diags = tfschema.CopyRoleV4FromTerraform(ctx, plan, role)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := role.CheckAndSetDefaults()
	if err != nil {
		resp.Diagnostics.AddError("Error setting Role defaults", err.Error())
		return
	}

	err = r.p.Client.UpsertRole(ctx, role)
	if err != nil {
		resp.Diagnostics.AddError("Error creating Role", err.Error())
		return
	}

	id := role.Metadata.Name
	roleI, err := r.p.Client.GetRole(ctx, id)
	if err != nil {
		resp.Diagnostics.AddError("Error reading Role", err.Error())
		return
	}

	role, ok := roleI.(*apitypes.RoleV4)
	if !ok {
		resp.Diagnostics.AddError("Error reading Role", fmt.Sprintf("Can not convert %T to RoleV4", roleI))
		return
	}

	diags = tfschema.CopyRoleV4ToTerraform(ctx, *role, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read reads teleport Role
func (r resourceTeleportRole) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state types.Object
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var id types.String
	diags = req.State.GetAttribute(ctx, tftypes.NewAttributePath().WithAttributeName("metadata").WithAttributeName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	roleI, err := r.p.Client.GetRole(ctx, id.Value)
	if err != nil {
		resp.Diagnostics.AddError("Error reading Role", err.Error())
		return
	}

	role := roleI.(*apitypes.RoleV4)
	diags = tfschema.CopyRoleV4ToTerraform(ctx, *role, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Update updates teleport Role
func (r resourceTeleportRole) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	role := &apitypes.RoleV4{}
	diags = tfschema.CopyRoleV4FromTerraform(ctx, plan, role)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	name := role.Metadata.Name

	err := role.CheckAndSetDefaults()
	if err != nil {
		resp.Diagnostics.AddError("Error updating Role", err.Error())
		return
	}

	err = r.p.Client.UpsertRole(ctx, role)
	if err != nil {
		resp.Diagnostics.AddError("Error updating Role", err.Error())
		return
	}

	roleI, err := r.p.Client.GetRole(ctx, name)
	if err != nil {
		resp.Diagnostics.AddError("Error reading Role", err.Error())
		return
	}

	role = roleI.(*apitypes.RoleV4)
	diags = tfschema.CopyRoleV4ToTerraform(ctx, *role, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Delete deletes Teleport Role
func (r resourceTeleportRole) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	var id types.String
	diags := req.State.GetAttribute(ctx, tftypes.NewAttributePath().WithAttributeName("metadata").WithAttributeName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.p.Client.DeleteRole(ctx, id.Value)
	if err != nil {
		resp.Diagnostics.AddError("Error deleting RoleV4", err.Error())
		return
	}

	resp.State.RemoveResource(ctx)
}

// ImportState imports Role state
func (r resourceTeleportRole) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	roleI, err := r.p.Client.GetRole(ctx, req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Error reading Role", err.Error())
		return
	}

	role := roleI.(*apitypes.RoleV4)

	var state types.Object

	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = tfschema.CopyRoleV4ToTerraform(ctx, *role, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	state.Attrs["id"] = types.String{Value: role.Metadata.Name}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
