package provider

import (
	"context"

	"github.com/gravitational/teleport-plugins/terraform/tfschema"
	"github.com/gravitational/trace"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/gravitational/teleport/api/client"
	"github.com/gravitational/teleport/api/types"
)

// teleport_user resource definition
func resourceTeleportUser() *schema.Resource {
	return &schema.Resource{
		Create: resourceTeleportUserUpsert,
		Read:   resourceTeleportUserRead,
		Update: resourceTeleportUserUpsert,
		Delete: resourceTeleportUserDelete,
		Exists: resourceTeleportUserExists,

		Schema: tfschema.SchemaUserV2(),
	}
}

func resourceTeleportUserUpsert(d *schema.ResourceData, m interface{}) error {


	// Teleport's types package provides functions that initialize
	// empty structs with their default values.
	//
	// This is useful to populate a default struct of the required type,
	// and then unmarshall terraform data into it, overwriting defaults
	// when users requested to do so.
	//
	// We don't restrict users to only set some subset of "allowed" fields,
	// granting them flexibility to go crazy with terraform config,
	// but we want to provide sane defaults that Teleport expects.
	//
	// So, CRUD functions should do the following:
	// 1. Init the object with a provided func, i.e. user := types.NewUser(name)
	// 2. Set Metadata, Spec, and any other terraform-configured fields into the structs
	// 3. Send the struct to Teleport's Auth server via Client
	//
	// The second part in this list can be fully generated by protoc-gen-schema.
	//

	// To initialize a types.UserV2 we need their name,
	// so first we unmarshall the minimal required amount of data.

	metaResourceList := d.Get("metadata").([]interface{})
	metaResourceData := metaResourceList[0].(map[string]interface{})
	name := metaResourceData["name"].(string)


	// Create an instance of User with defaults from Teleport's Types
	// Not sure if we have a good way to know what func to use for
	// other types to get the defaults set.

	user, err := types.NewUser(name)
	if err != nil {
		// TODO: We want to cast errors to Diags
		return trace.Wrap(err)
	}

	// Cast types.User interface to an actual struct so we can access .Metadata and .Spec
	u2 := user.(*types.UserV2)

	// THIS PART CAN BE GENERATED:
	// Now create a Spec struct. types.UserSpecV2{}, and unmarshall schama.ResourceData into it.
	// We can generate a function that would take a reference to UserV2, a reference to ResourceData,
	// and update the user record in-place:
	//
	// tfschema.unmarshallDataIntoUserV2(u2, d) error

	userSpecV2 := types.UserSpecV2{
		OIDCIdentities:       []types.ExternalIdentity{},
		SAMLIdentities:       []types.ExternalIdentity{},
		GithubIdentities:     []types.ExternalIdentity{},
		Roles:                []string{},
		Traits:               map[string][]string{},
		// Status:               types.LoginStatus{},
		// Expires:              time.Time{},
		// CreatedBy:            types.CreatedBy{},
		// LocalAuth:            &types.LocalAuthSecrets{},
	}

	u2.Spec = userSpecV2

	// THIS PART IS RESPONSIBLE FOR CALLING THE API
	// When our unmarhall function is done, we can take the resulting struct and send it to Teleport:

	// TODO: Rerwite this to be a safe cast
	client := m.(*client.Client)

	// Call Teleport Auth server
	err = client.CreateUser(context.Background(), u2)
	if err != nil {
		// TODO: Rewrite using Diags
		return trace.Wrap(err)
	}

	// Terraform requires that we d.SetId() _after_ the object has been provisioned.
	d.SetId(user.GetName())

	return nil

	// This is a bunch of old code that unmarshalls lists and maps
	// Use this as a reference if needed.
	//
	// tfRoles := d.Get("roles").([]interface{})
	// roles := make([]string, len(tfRoles))

	// for i, tfRole := range tfRoles {
	// 	roles[i] = tfRole.(string)
	// }

	// tfTraits := d.Get("trait").(*schema.Set).List()
	// traits := map[string][]string{}

	// for _, tfTrait := range tfTraits {
	// 	traitMap := tfTrait.(map[string]interface{})
	// 	name := traitMap["name"].(string)

	// 	tfValues := traitMap["value"].([]interface{})
	// 	values := make([]string, len(tfValues))

	// 	for i, value := range tfValues {
	// 		values[i] = value.(string)
	// 	}

	// 	traits[name] = values
	// }
}

func resourceTeleportUserRead(d *schema.ResourceData, m interface{}) error {
	// 	client := m.(*client.Client)
	// 	name := d.Get("name").(string)

	// 	u, err := client.GetUser(name, false)
	// 	if err != nil {
	// 		return trace.Wrap(err)
	// 	}

	// 	user := u.(types.User)

	// 	err = client.UpdateUser(context.Background(), user)
	// 	if err != nil {
	// 		return trace.Wrap(err)
	// 	}

	// 	// traits := user.GetTraits()
	// 	// tfTraits := map[string]string{}

	// 	// for k, trait := range traits {
	// 	// 	tfTraits[k] = strings.Join(trait, " ")
	// 	// }

	// 	// d.Set("roles", user.GetRoles())
	// 	// d.Set("traits", tfTraits)

	return nil
}

func resourceTeleportUserDelete(d *schema.ResourceData, m interface{}) error {
	// 	client := m.(*client.Client)
	// 	name := d.Get("name").(string)

	// 	err := client.DeleteUser(context.Background(), name)
	// 	if err != nil {
	// 		return trace.Wrap(err)
	// 	}

	return nil
}

func resourceTeleportUserExists(d *schema.ResourceData, m interface{}) (bool, error) {
	// client := m.(*client.Client)
	// name := d.Get("name").(string)

	// user, err := client.GetUser(name, false)

	// if err != nil {
	// 	return false, err
	// }

	// return user != nil, nil

	return true, nil
}
